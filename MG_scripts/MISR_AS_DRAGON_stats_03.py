# MISR_AS_DRAGON_stats_03.py
#
# This is a Python 2.7.10 code to read the NetCDF file generated by the code
# MISR_AS_*_DRAGON_*.py and generate plots with overall statistics.
#
# Creation Date: 2015-06-04
# Last Modified: 2015-06-04
#
# by Michael J. Garay
# (Michael.J.Garay@jpl.nasa.gov)

# Import packages

from __future__ import print_function # Makes 2.7 behave like 3.3
import glob
import matplotlib.pyplot as plt
from netCDF4 import Dataset
import numpy as np
import os

def main():  # Main code

# Set the minimum and maximum AOD for plotting

    aod_plot_min = 0.00
    
#    aod_plot_max = 0.30
#    aod_plot_max = 0.60
#    aod_plot_max = 1.20
    aod_plot_max = 1.40
    
#    aod_plot_ticks = 7 # Usually 1 more than you think
    aod_plot_ticks = 8 # Usually 1 more than you think
    
#    aod_plot_step = 0.05
#    aod_plot_step = 0.1
    aod_plot_step = 0.2

# Set the paths

    datapath = '/Users/mgaray/Desktop/CODING/PYTHON/PY27/JUN15/AEROSOL/DATA/'
    figpath = '/Users/mgaray/Desktop/CODING/PYTHON/PY27/JUN15/AEROSOL/FIGS/'

# Set the MISR product

#    misr_name = '0022'  # 17.6 km Standard Product
#    misr_name = '22b24-10e' # New Product
#    misr_name = '22b24-26' # New Product
#    misr_name = '22b24-26+1' # New Product
#    misr_name = '22b24-26+2' # New Product
#    misr_name = '22b24-27+3' # New Product
#    misr_name = '22b24-29' # New Product
#    misr_name = '22b24-29+1' # New Product
#    misr_name = '22b24-29+3' # New Product
#    misr_name = '22b24-34+0' # New Product
    misr_name = '22b24-34+1' # New Product
#    misr_name = '22b24-34+2' # New Product
#    misr_name = '22b24-34+3' # New Product

# Set the base file name

    out_base = "_V"+misr_name+"_DRAGON_stats_03.png"

### Find and read the correct NetCDF file

# Set the filename

    data_name = "MISR_AERONET_DRAGON_V"+misr_name+"_04.nc"

# Change directory to the basepath and get the file list

    os.chdir(datapath)
    file_list = glob.glob(data_name)

# Choose the first file

    inputName = file_list[0]

# Tell user location in process

    print('Reading: ',inputName)

# Open the NetCDF file

    rootgrp = Dataset(inputName, 'r', format='NETCDF4')

# Assign the variables to an array

    lat = rootgrp.variables['Latitude'][:]
    lon = rootgrp.variables['Longitude'][:]

    aero_aod = rootgrp.variables['AERONET_AOD'][:]
    misr_be_aod = rootgrp.variables['MISR_BE_AOD'][:]
    misr_lr_aod = rootgrp.variables['MISR_LR_AOD'][:]
    
    misr_lr_chi2 = rootgrp.variables['MISR_LR_CHI2'][:]
    misr_lr_mix = rootgrp.variables['MISR_LR_MIX'][:]

    delta_time = rootgrp.variables['Delta_T'][:]
    dist = rootgrp.variables['Distance'][:]

# Close the NetCDF file

    rootgrp.close()
    
### Plot the data

    max_val = aod_plot_max

# Set the plot area
# NOTE: The base plot size is 6 x 6, so a 2 row, 3 column set would be 18 x 12

    plt.figure(figsize=(12,6), dpi=120)

## Linear plot (Best Estimate)

    good = (misr_be_aod > 0)
    ref_aod = aero_aod[good]
    test_aod = misr_be_aod[good]

    plt.subplot(1, 2, 1)
    plt.scatter(ref_aod,test_aod,marker='o',color='black',s=25)   
    plt.title("V"+misr_name+" Best Estimate")

# Plot the one-to-one line

    plt.plot([0.0,max_val], [0.0,max_val], color="k", lw=1)

# Plot the envelopes

    dummy_aod = np.logspace(-4,1,num=100)
    up1_aod = 1.20*dummy_aod
    up2_aod = dummy_aod+0.05
    upper_aod = np.maximum(up1_aod,up2_aod)

    lo1_aod = 0.80*dummy_aod
    lo2_aod = dummy_aod-0.05
    lower_aod = np.minimum(lo1_aod,lo2_aod)

    plt.plot(dummy_aod,lower_aod,color="0.75", lw=1)
    plt.plot(dummy_aod,upper_aod,color="0.75", lw=1)

# Set the limits and axis labels

    plt.xlim(0.0,max_val)
    plt.ylim(0.0,max_val)

    plt.xlabel('AERONET AOD')
    plt.ylabel('MISR AOD')

    plt.grid(True)

# Include some text on the Best Estimate Figure

    x_pos = (aod_plot_max/2.) + (aod_plot_max/10.)
    y_pos1 = (aod_plot_max/10.)
    y_pos2 = y_pos1 + (aod_plot_max/30.)
    y_pos3 = y_pos2 + (aod_plot_max/30.)
    y_pos4 = y_pos3 + (aod_plot_max/30.)
    y_pos5 = y_pos4 + (aod_plot_max/30.)
    y_pos6 = y_pos5 + (aod_plot_max/30.)
    
    plt.text(x_pos,y_pos6,'Best Estimate',fontsize=12) # Version

    count = len(test_aod)
    out_text = 'N = '+str(count)
    plt.text(x_pos,y_pos5,out_text,fontsize=10) # Count

    temp = np.corrcoef(ref_aod,test_aod)
    be_r = temp[0,1]
    out_text = 'r = '+"{0:.4f}".format(be_r)
    plt.text(x_pos,y_pos4,out_text,fontsize=10) # Correlation coefficient

    rmse = np.sqrt(((test_aod - ref_aod) ** 2).mean())
    out_text = 'RMSE = '+"{0:.4f}".format(rmse)
    plt.text(x_pos,y_pos3,out_text,fontsize=10) # Root mean squared error

    diff = test_aod - ref_aod
    bias = np.mean(diff)
    out_text = 'Bias = '+"{0:.4f}".format(bias)
    plt.text(x_pos,y_pos2,out_text,fontsize=10) # Bias

    offset = np.ones_like(ref_aod)*0.05
    inner = np.absolute(diff) < np.maximum(offset,ref_aod*0.2)
    in_frac = (np.sum(inner)/(1.0*count))*100.0
    out_text = 'Percent In = '+"{0:.2f}".format(in_frac)
    plt.text(x_pos,y_pos1,out_text,fontsize=10) # Percent in envelope

## Linear plot (Lowest Residual)

    good = (misr_lr_aod > 0)
    ref_aod = aero_aod[good]
    test_aod = misr_lr_aod[good]

    plt.subplot(1, 2, 2)
    plt.scatter(ref_aod,test_aod,marker='o',color='black',s=25)   
    plt.title("V"+misr_name+" Lowest Residual")

# Plot the one-to-one line

    plt.plot([0.0,max_val], [0.0,max_val], color="k", lw=1)

# Plot the envelopes

    dummy_aod = np.logspace(-4,1,num=100)
    up1_aod = 1.20*dummy_aod
    up2_aod = dummy_aod+0.05
    upper_aod = np.maximum(up1_aod,up2_aod)

    lo1_aod = 0.80*dummy_aod
    lo2_aod = dummy_aod-0.05
    lower_aod = np.minimum(lo1_aod,lo2_aod)

    plt.plot(dummy_aod,lower_aod,color="0.75", lw=1)
    plt.plot(dummy_aod,upper_aod,color="0.75", lw=1)

# Set the limits and axis labels

    plt.xlim(0.0,max_val)
    plt.ylim(0.0,max_val)

    plt.xlabel('AERONET AOD')
    plt.ylabel('MISR AOD')

    plt.grid(True)

# Include some text on the Lowest Residual Figure

    plt.text(x_pos,y_pos6,'Lowest Resid',fontsize=12) # Version

    count = len(test_aod)
    out_text = 'N = '+str(count)
    plt.text(x_pos,y_pos5,out_text,fontsize=10) # Count

    temp = np.corrcoef(ref_aod,test_aod)
    be_r = temp[0,1]
    out_text = 'r = '+"{0:.4f}".format(be_r)
    plt.text(x_pos,y_pos4,out_text,fontsize=10) # Correlation coefficient

    rmse = np.sqrt(((test_aod - ref_aod) ** 2).mean())
    out_text = 'RMSE = '+"{0:.4f}".format(rmse)
    plt.text(x_pos,y_pos3,out_text,fontsize=10) # Root mean squared error

    diff = test_aod - ref_aod
    bias = np.mean(diff)
    out_text = 'Bias = '+"{0:.4f}".format(bias)
    plt.text(x_pos,y_pos2,out_text,fontsize=10) # Bias

    offset = np.ones_like(ref_aod)*0.05
    inner = np.absolute(diff) < np.maximum(offset,ref_aod*0.2)
    in_frac = (np.sum(inner)/(1.0*count))*100.0
    out_text = 'Percent In = '+"{0:.2f}".format(in_frac)
    plt.text(x_pos,y_pos1,out_text,fontsize=10) # Percent in envelope

# Save the figure

    os.chdir(figpath)
#    outname = 'AOD_Regression'+out_base
#    plt.savefig(outname,dpi=120)

# Set the plot area (SECOND FIGURE)
# NOTE: The base plot size is 6 x 6, so a 2 row, 3 column set would be 18 x 12

    plt.figure(figsize=(12,6), dpi=120)

## Chi-Squared vs. AOD

    good = (misr_lr_aod > 0)
    ref_aod = aero_aod[good]
    test_aod = misr_lr_chi2[good]

    plt.subplot(1, 2, 1)
    plt.scatter(ref_aod,test_aod,marker='o',color='black',s=25)   
    plt.title("V"+misr_name+" Chi-Squared vs. AOD")

# Set the limits and axis labels

    plt.xlim(0.0,max_val)
    plt.ylim(0.0,80.0)
    
# Add a line at the V22 threshold

    plt.plot([0.0,max_val],[4.0,4.0], color='green', linewidth=2)    

    plt.xlabel('AERONET AOD')
    plt.ylabel('Minimum Chi-Squared')

    plt.grid(True)

## Mixture vs. AOD

    good = (misr_lr_aod > 0)
    ref_aod = aero_aod[good]
    test_aod = misr_lr_mix[good]

    plt.subplot(1, 2, 2)
    plt.scatter(ref_aod,test_aod,marker='o',color='black',s=25)   
    plt.title("V"+misr_name+" Mixture vs. AOD")

# Set the limits and axis labels

    plt.xlim(0.0,max_val)
    plt.ylim(0.0,74)

    plt.xlabel('AERONET AOD')
    plt.ylabel('MISR AOD')

    plt.grid(True)

# Save the figure

    outname = 'Chi2_Mix'+out_base
    plt.savefig(outname,dpi=120)

# Show the plot

    plt.show()
       
# Tell user completion was successful

    print("\nSuccessful Completion\n")

### END MAIN FUNCTION


def Haversine_Distance(lat1,lon1,lat_arr,lon_arr):
### Distance Calculation Based on the Haversine Formula
# Creation Date: 2015-05-13
# Last Modified: 2015-05-13
# By Michael J. Garay
# Michael.J.Garay@jpl.nasa.gov
#
# Note: This follows the formula from http://williams.best.vwh.net/avform.htm#Dist
# But see a discussion on the Earth-radius at 
# http://www.cs.nyu.edu/visual/home/proj/tiger/gisfaq.html
#
# Input: lat1 = First latitude, single element(degrees)
#        lon1 = First longitude, single element
#        lat2 = Second latitude, array of values
#        lon2 = Second longitude, array of values
#
# Output: Returns an array of distances (km)

# Convert lat/lon to radians

    rat1 = lat1*np.pi/180.0
    ron1 = lon1*np.pi/180.0
    
    rat2 = lat_arr*np.pi/180.0
    ron2 = lon_arr*np.pi/180.0

# Calculate the distance using the Haversine Formula

    d = 2.0*np.arcsin(np.sqrt((np.sin((rat2-rat1)/2))**2 +
      np.cos(rat2)*np.cos(rat1)*(np.sin((ron2-ron1)/2))**2))

# Convert to kilometers
    
    dist = 6371.0 * d
    
    return dist

### END Haversine_Distance


if __name__ == '__main__':
    main()
